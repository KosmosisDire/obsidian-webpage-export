import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "fs";
import path from "path";
import { solidPlugin } from "esbuild-plugin-solid";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// let outputFolder = 'C:\\Main\\Obsidian\\Export Development\\.obsidian\\plugins\\webpage-html-export\\';
let outputFolder = "C:\\Main\\Obsidian\\Development\\.obsidian\\plugins\\webpage-html-export\\";

const prod = (process.argv[2] === 'production');

// Plugin build
await esbuild.build({
  loader: {
    '.txt.js': 'text',
    '.txt.css': 'text',
    '.wasm': 'binary',
    '.png': 'binary',
  },
  banner: {
    js: banner,
  },
  entryPoints: ['src/plugin/main.ts'],
  bundle: true,
  tsconfig: 'tsconfig.json',
  external: [
    'obsidian',
    'electron',
    '@codemirror/autocomplete',
    '@codemirror/collab',
    '@codemirror/commands',
    '@codemirror/language',
    '@codemirror/lint',
    '@codemirror/search',
    '@codemirror/state',
    '@codemirror/view',
    '@lezer/common',
    '@lezer/highlight',
    '@lezer/lr',
    'node:buffer',
    'node:stream',
    ...builtins
  ],
  format: 'cjs',
  target: 'es2018',
  logLevel: "info",
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  plugins: [solidPlugin()],
  alias: {
    '@shared': path.resolve('src/shared'),
  },
  outfile: outputFolder + 'main.js'
}).catch(() => process.exit(1));

// Frontend build with Solid.js
await esbuild.build({
  banner: {
    js: banner,
  },
  entryPoints: ['src/frontend/index.tsx'],
  bundle: true,
  format: 'iife',
  globalName: 'WebpageExport',
  target: 'es2018',
  logLevel: "info",
  sourcemap: prod ? false : 'inline',
  treeShaking: true,
  outfile: 'src/frontend/dist/main.js',
  plugins: [solidPlugin()],
  alias: {
    '@shared': path.resolve('src/shared'),
  },
  define: {
    'process.env.NODE_ENV': prod ? '"production"' : '"development"',
  },
}).catch(() => process.exit(1));

// Copy HTML and CSS
if (!fs.existsSync('src/frontend/dist')) {
  fs.mkdirSync('src/frontend/dist', { recursive: true });
}

// Ensure styles directory exists
if (!fs.existsSync('src/frontend/dist/styles')) {
  fs.mkdirSync('src/frontend/dist/styles', { recursive: true });
}

fs.copyFileSync('src/frontend/index.html', 'src/frontend/dist/index.html');
fs.copyFileSync('src/frontend/styles/main.css', 'src/frontend/dist/styles/main.css');

console.log('Frontend build completed');
